import java.util.*;

public class Main{
    
    public static class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data = data;
            left = null;
            right = null;
        }
    }
    public static class Pair{
        Node node;
        int state;
        Pair(Node node){
            this.node = node;
            this.state = 0;
        }
    }
    public static Node construct(Integer arr[]){
        Stack<Pair> st = new Stack<>();
        Node root = new Node(arr[0]);
        st.push(new Pair(root));
        int idx = 1;
        while(st.size() > 0){
            Pair top = st.peek();
            if(top.state == 0){
                Integer val = arr[idx];
                if(val != null){
                    Node child = new Node(val);
                    top.node.left = child;
                    st.push(new Pair(child));
                }
                top.state++;
                idx++;
            }else if(top.state == 1){
                Integer val = arr[idx];
                if(val != null){
                    Node child = new Node(val);
                    top.node.right = child;
                    st.push(new Pair(child));
                }
                top.state++;
                idx++;
            }else{
                st.pop();
            }
        }
        return root;
    }
    
    public static void display(Node node){
        if(node == null)return;
        System.out.print(node.left == null ? "." : node.left.data);
        System.out.print(" <- "+node.data+" -> ");
        System.out.println(node.right == null ? "." : node.right.data);

        display(node.left);
        display(node.right);        
    }
    public static int sum(Node node){
        if(node == null){
            return 0;
        }
        
        int lsize = sum(node.left);
        int rsize = sum(node.right);
        
        return lsize + rsize + node.data;
    }
    public static int size(Node node){
        if(node == null){
            return 0;
        }
        
        int lsize = size(node.left);
        int rsize = size(node.right);
        
        return lsize + rsize + 1;
    }
    // public static int max(Node root){
    //     if(root == null){
    //         return Integer.MIN_VALUE;
    //     }
        
    //     int lmax = max(root.left);
    //     int rmax = max(root.right);
        
        // return Math.max(Math.max(lmax,rmax),node.data);
    // }
    public static int height(Node root){
        if(root == null){
            return -1;
        }
        
        int lht = height(root.left);
        int rht = height(root.right);
        
        return Math.max(lht,rht)+1;
    }
    
    public static boolean find(Node root,int data){
        if(root == null){
            return false;
        }
        if(root.data == data){
            return true;
        }
        boolean lres = find(root.left,data);
        if(lres) return true;
        boolean res = find(root.right,data);
        if(res) return true;
        
        return false;
    }
    public static ArrayList<Integer> nodeToRootPath(Node node, int data){
        if(node == null){
            return new ArrayList<>();
        }
    
        if(node.data == data){
            ArrayList<Integer> list = new ArrayList<>();
            list.add(data);
            return list;
        }
    
        ArrayList<Integer> lres = nodeToRootPath(node.left, data);
        if(lres.size() > 0){
            lres.add(node.data);
            return lres;
        }
        ArrayList<Integer> rres = nodeToRootPath(node.right, data);
        if(rres.size() > 0){
            rres.add(node.data);
            return rres;
        }
        return new ArrayList<>();
    }
    public static void  printKLevelsDown(Node root,int k){
        if(root == null){
            return;
        }
        
        if(k==0){
            System.out.println(root.data);
            return;
        }
        printKLevelsDown(root.left,k-1);
        printKLevelsDown(root.right,k-1);
    }
    public static void printSingleChildNodes(Node node){
        if(node == null) return;
        if(node.left != null && node.right == null){
            System.out.println(node.left.data);
        }
        if(node.left == null && node.right != null){
            System.out.println(node.right.data);
        }
        printSingleChildNodes(node.left);
        printSingleChildNodes(node.right);
    }
    public static Node removeLeaves(Node root){
        if(root == null || (root.left == null && root.right == null)){
            return null;
        }
        root.left = removeLeaves(root.left);
        root.right = removeLeaves(root.right);
        
        return root;   
    }
    
    public static void main(String args[]){
        Integer arr[] = {10,20,40,60,null,null,null,50,70,null,null,80,null,null,30,null,90,100,null,null,null};
        Node root = construct(arr);
        // display(root);
        // System.out.println(sum(root));
        // System.out.println(size(root));
        // System.out.println(max(root));
        // System.out.println(height(root));
        // System.out.println(find(root,80));
        // System.out.println(nodeToRootPath(root,100));
        // printKLevelsDown(root,3);
        // printSingleChildNodes(root);
        Node r = removeLeaves(root);
        display(r);
    }
}
