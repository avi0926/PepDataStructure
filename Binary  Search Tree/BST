import java.util.*;

public class Main{
    
    public static class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data = data;
            left = null;
            right = null;
        }
    }
    public static class Pair{
        Node node;
        int state;
        Pair(Node node){
            this.node = node;
            this.state = 0;
        }
    }
    public static Node construct(Integer arr[]){
        Stack<Pair> st = new Stack<>();
        Node root = new Node(arr[0]);
        st.push(new Pair(root));
        int idx = 1;
        while(st.size() > 0){
            Pair top = st.peek();
            if(top.state == 0){
                Integer val = arr[idx];
                if(val != null){
                    Node child = new Node(val);
                    top.node.left = child;
                    st.push(new Pair(child));
                }
                top.state++;
                idx++;
            }else if(top.state == 1){
                Integer val = arr[idx];
                if(val != null){
                    Node child = new Node(val);
                    top.node.right = child;
                    st.push(new Pair(child));
                }
                top.state++;
                idx++;
            }else{
                st.pop();
            }
        }
        return root;
    }
    
    public static void display(Node node){
        if(node == null)return;
        System.out.print(node.left == null ? "." : node.left.data);
        System.out.print(" <- "+node.data+" -> ");
        System.out.println(node.right == null ? "." : node.right.data);

        display(node.left);
        display(node.right);        
    }
    
    public static int size(Node node){
        if(node == null){
            return 0;
        }
        
        int lsize = size(node.left);
        int rsize = size(node.right);
        
        return lsize + rsize + 1;
    }
    public static int max(Node node) {
        if(node == null){
          return -1;
        }
        if(node.right != null){
          return max(node.right);
        }else{
          return node.data;
        }
    }

    public static int min(Node node) {
        if(node == null){
          return -1;
        }
        if(node.left != null){
          return min(node.left);
        }else{
          return node.data;
        }
    }
    public static boolean find(Node node, int data){
        if(node == null) return false;
        if(node.data == data) return true;
        if(data < node.data) return find(node.left,data);
        return find(node.right,data);
    }
    
    public static Node add(Node node, int data) {
        if(node == null){
            return new Node(data,null,null);
        }

        if(data < node.data){
            node.left = add(node.left,data);
        }else if(data > node.data){
            node.right = add(node.right,data);
        }

        return node;
    }

    public static void main(String args[]){
        
    }
}
